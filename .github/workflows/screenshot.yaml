name: Screenshots

on:
  workflow_dispatch:
    inputs:
      mock_version:
        description: Mock Version
        type: string
        required: true
        default: '1.0.0'

jobs:
  screenshot:
    name: Take screenshot
    concurrency:
      group: "${{ github.workflow_ref }} (${{ matrix.platform }})"
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        include:
        - platform: mac
          runs-on: macos-12
        - platform: win
          runs-on: windows-latest
        - platform: linux
          runs-on: ubuntu-latest
    runs-on: ${{ matrix.runs-on }}
    steps:

    - name: Harden Runner
      uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
      with:
        egress-policy: audit

    - name: "macOS: Install GetWindowID"
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install smokris/getwindowid/getwindowid

    - name: "Linux: Install Tools"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install graphicsmagick x11-utils mutter # spellcheck-ignore-line

    - name: "macOS: Set startup command"
      if: runner.os == 'macOS'
      run: echo "EXEC_COMMAND=$EXEC_COMMAND" >> "$GITHUB_ENV"
      env:
        EXEC_COMMAND: exec
    - name: "Linux: Set startup command"
      if: runner.os == 'Linux'
      run: |
        # Write a wrapper script to start mutter (so we get window decorations).
        echo '#!/bin/sh' > /usr/local/bin/exec-command
        echo 'mutter --replace --sm-disable --x11 &>/dev/null &' >> /usr/local/bin/exec-command
        echo 'exec "$@"' >> /usr/local/bin/exec-command
        chmod a+x /usr/local/bin/exec-command
        echo "EXEC_COMMAND=$EXEC_COMMAND /usr/local/bin/exec-command" >> "$GITHUB_ENV"
      env:
        EXEC_COMMAND: >-
          exec xvfb-run --auto-servernum
          --server-args='-screen 0 1280x960x24'
    - name: "Windows: Set startup command"
      if: runner.os == 'Windows'
      shell: bash
      run: echo "EXEC_COMMAND=$EXEC_COMMAND" >> "$GITHUB_ENV"
      env:
        EXEC_COMMAND: # On Windows, we don't need any commands.

    - uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1
      with:
        persist-credentials: false
    - uses: ./.github/actions/yarn-install
    - uses: ./.github/actions/setup-environment
    - name: Override version
      if: inputs.mock_version
      run: echo "RD_MOCK_VERSION=${{ inputs.mock_version }}" >> "${GITHUB_ENV}"
      shell: bash

    - run: ${{ env.EXEC_COMMAND }} yarn screenshots
      env:
        EXEC_COMMAND: ${{ env.EXEC_COMMAND }}
        RD_ENV_SCREENSHOT_SLEEP: 5000
        RD_LOGS_DIR: logs
    - name: Upload screenshots
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: screenshots-${{ matrix.platform }}.zip
        path: screenshots/output/
        if-no-files-found: error
    - name: Upload logs
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      if: always()
      with:
        name: logs-${{ matrix.platform }}.zip
        path: |
          logs/
          e2e/reports/
          screenshots/output/
  package:
    name: Package screenshots for docs
    needs: screenshot
    concurrency:
      group: "${{ github.workflow_ref }} (package)"
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
    - name: Harden Runner
      uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
      with:
        egress-policy: audit

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        pattern: screenshots-*.zip
        merge-multiple: true
        path: ${{ github.workspace }}/in
    - name: Rename images
      run: |
        while IFS= read -d $'\0' -r line; do
          IFS=/ read -r in platform scheme window name <<<"$line"
          if [[ "$scheme" != "light" ]]; then
              continue
          fi
          case "$platform" in
              darwin) platform=macOS;;
              linux) platform=Linux;;
              win32) platform=Windows;;
          esac
          if [[ "$window" == "main" ]]; then
              window="ui-main"
          fi
          if [[ $name =~ ^[0-9]+_ ]]; then
              name="${name#*_}"
          fi
          out="out/${window}/${platform}_${name}"
          mkdir -p "$(dirname "$out")"
          cp "$line" "$out"
          echo "$out"
        done < <(find in -name '*.png' -print0)
    - name: Generate introduction image
      run: |
        # The intro image consists of the mac image on the left and the Windows
        # image on the right, each showing Kubernetes settings.
        sudo DEBIAN_FRONTEND=noninteractive apt-get install graphicsmagick # spellcheck-ignore-line
        mkdir -p out/getting-started
        gm composite -gravity center in/darwin/light/preferences/*_kubernetes.png in/darwin/light/main/*_General.png darwin.png
        gm composite -gravity center in/win32/light/preferences/*_kubernetes.png in/win32/light/main/*_General.png win32.png
        gm convert darwin.png win32.png +append out/getting-started/introduction_preferences_tabKubernetes.png
    - uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: screenshots.zip
        path: out
        if-no-files-found: error
        overwrite: true
